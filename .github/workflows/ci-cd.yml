# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these
#    https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux)):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#
# 3. Choose the appropriate render engine for the bake step https://github.com/Azure/k8s-bake. The config below assumes Helm.
#    Set your helmChart, overrideFiles, overrides, and helm-version to suit your configuration.
#    - CHART_PATH (path to your helm chart)
#    - CHART_OVERRIDE_PATH (path to your helm chart with override values)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy Ultra-Low Latency Logging Engine to AKS with Helm

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "prodtradingbotregistry"
  CONTAINER_NAME_ULTRA_LOGGER: "ultra-logger"
  CONTAINER_NAME_LOG_AGGREGATOR: "log-aggregator"
  CONTAINER_NAME_METRICS_COLLECTOR: "metrics-collector"
  RESOURCE_GROUP: "prod-aks-trading-bot-rg"
  CLUSTER_NAME: "prod-trading-bot-cluster"
  CHART_PATH: "./helm-charts"
  BASE_CHART_OVERRIDE_PATH: "./helm-charts/values.yaml"
  ENV_CHART_OVERRIDE_PATH: "./helm-charts/values-prod.yaml"

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets -- -D warnings

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --verbose

      - name: Run cargo bench (dry run)
        uses: actions-rs/cargo@v1
        with:
          command: bench
          args: --workspace --no-run

  buildImages:
    name: Build and Push Docker Images
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [test]
    steps:        
      # Install Azure CLI
      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      - name: Checkout databaseschema
        uses: actions/checkout@v4
        with:
          repository: Nwagbara-Group-LLC/databaseschema
          path: databaseschema

      - name: Checkout redisutils
        uses: actions/checkout@v4
        with:
          repository: Nwagbara-Group-LLC/redisutils
          path: redisutils

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      # Build and push ultra-logger image
      - name: Build and push ultra-logger image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_ULTRA_LOGGER }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} -f Dockerfile.ultra-logger .

      # Build and push log-aggregator image
      - name: Build and push log-aggregator image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_LOG_AGGREGATOR }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} -f Dockerfile.log-aggregator .

      # Build and push metrics-collector image
      - name: Build and push metrics-collector image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_METRICS_COLLECTOR }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} -f Dockerfile.metrics-collector .

  deploy:
    name: Deploy to AKS
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImages]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
            
      # Runs Helm to create manifest files
      - name: Bake deployment
        uses: azure/k8s-bake@v2
        with:
          renderEngine: "helm"
          helmChart: ${{ env.CHART_PATH }}
          overrideFiles: |
            ${{ env.BASE_CHART_OVERRIDE_PATH }}
            ${{ env.ENV_CHART_OVERRIDE_PATH }}
          overrides: |
            ultraLogger.image.tag: ${{ github.sha }}
            logAggregator.image.tag: ${{ github.sha }}
            metricsCollector.image.tag: ${{ github.sha }}
            global.environment: production
            global.registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          helm-version: "latest"
        id: bake

      # Deploys application based on manifest files from previous step
      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_ULTRA_LOGGER }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_LOG_AGGREGATOR }}:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME_METRICS_COLLECTOR }}:${{ github.sha }}

      # Verify deployment
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/ultra-logging-engine-ultra-logger -n ultra-logging --timeout=300s
          kubectl rollout status deployment/ultra-logging-engine-log-aggregator -n ultra-logging --timeout=300s
          kubectl rollout status deployment/ultra-logging-engine-metrics-collector -n ultra-logging --timeout=300s
          
          echo "=== Deployment Status ==="
          kubectl get pods -n ultra-logging -l app.kubernetes.io/name=ultra-logging-engine
          kubectl get services -n ultra-logging -l app.kubernetes.io/name=ultra-logging-engine
