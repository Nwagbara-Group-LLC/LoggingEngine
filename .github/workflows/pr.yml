name: Pull Request CI

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      docker: ${{ steps.changes.outputs.docker }}
      helm: ${{ steps.changes.outputs.helm }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          rust:
            - '**/*.rs'
            - '**/Cargo.toml'
            - '**/Cargo.lock'
          docker:
            - '**/Dockerfile*'
            - '.dockerignore'
          helm:
            - 'helm-charts/**'
            - 'deploy.ps1'
          docs:
            - '**/*.md'
            - 'docs/**'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-pr-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --workspace --all-targets -- -D warnings

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    strategy:
      matrix:
        rust: [stable]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-test-

    - name: Run unit tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --lib --verbose

    - name: Run integration tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --test "*" --verbose

    - name: Run doc tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --workspace --doc

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.docker == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build ultra-logger Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.ultra-logger
        push: false
        tags: ultra-logger:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build log-aggregator Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.log-aggregator
        push: false
        tags: log-aggregator:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build metrics-collector Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.metrics-collector
        push: false
        tags: metrics-collector:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker images
      run: |
        echo "=== Testing Docker Images ==="
        
        # Test that images can run
        timeout 10s docker run --rm ultra-logger:pr-${{ github.event.number }} --help || true
        timeout 10s docker run --rm log-aggregator:pr-${{ github.event.number }} --help || true
        timeout 10s docker run --rm metrics-collector:pr-${{ github.event.number }} --help || true
        
        echo "✅ All Docker images tested successfully"

  helm-lint:
    name: Helm Lint and Template Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.helm == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm chart
      run: |
        helm lint helm-charts/

    - name: Template Helm chart (development)
      run: |
        helm template ultra-logging-engine helm-charts/ \
          --values helm-charts/values.yaml \
          --values helm-charts/values-dev.yaml \
          --set ultraLogger.image.tag=pr-${{ github.event.number }} \
          --set logAggregator.image.tag=pr-${{ github.event.number }} \
          --set metricsCollector.image.tag=pr-${{ github.event.number }}

    - name: Template Helm chart (production)
      run: |
        helm template ultra-logging-engine helm-charts/ \
          --values helm-charts/values.yaml \
          --values helm-charts/values-prod.yaml \
          --set ultraLogger.image.tag=pr-${{ github.event.number }} \
          --set logAggregator.image.tag=pr-${{ github.event.number }} \
          --set metricsCollector.image.tag=pr-${{ github.event.number }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-audit-pr-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-audit

    - name: Run security audit
      uses: actions-rs/cargo@v1
      with:
        command: audit

  performance-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-perf-pr-${{ hashFiles('**/Cargo.lock') }}

    - name: Build benchmarks
      uses: actions-rs/cargo@v1
      with:
        command: bench
        args: --workspace --no-run

    - name: Run quick performance test
      run: |
        echo "=== Quick Performance Test ==="
        
        # Build release binaries
        cargo build --release --workspace
        
        # Run a quick 10-second performance test
        timeout 15s target/release/ultra-logger --benchmark --duration=10s --threads=1 || true
        
        echo "✅ Performance test completed"

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [changes, lint-and-format, test, docker-build-test, helm-lint, security-scan, performance-check]
    if: always()
    steps:
    - name: PR Summary Comment
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            changes: '${{ needs.changes.result }}',
            lintAndFormat: '${{ needs.lint-and-format.result }}',
            test: '${{ needs.test.result }}',
            dockerBuild: '${{ needs.docker-build-test.result }}',
            helmLint: '${{ needs.helm-lint.result }}',
            securityScan: '${{ needs.security-scan.result }}',
            performanceCheck: '${{ needs.performance-check.result }}'
          };
          
          const getIcon = (result) => {
            switch(result) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'cancelled': return '⏹️';
              case 'skipped': return '⏭️';
              default: return '⚪';
            }
          };
          
          const summary = `## 🚀 Ultra-Low Latency Logging Engine - PR Summary
          
          | Check | Status | Result |
          |-------|--------|---------|
          | Change Detection | ${getIcon(results.changes)} | ${results.changes} |
          | Lint & Format | ${getIcon(results.lintAndFormat)} | ${results.lintAndFormat} |
          | Tests | ${getIcon(results.test)} | ${results.test} |
          | Docker Build | ${getIcon(results.dockerBuild)} | ${results.dockerBuild} |
          | Helm Lint | ${getIcon(results.helmLint)} | ${results.helmLint} |
          | Security Scan | ${getIcon(results.securityScan)} | ${results.securityScan} |
          | Performance Check | ${getIcon(results.performanceCheck)} | ${results.performanceCheck} |
          
          ### 📊 Changes Detected:
          - Rust Code: ${{ needs.changes.outputs.rust }}
          - Docker Files: ${{ needs.changes.outputs.docker }}
          - Helm Charts: ${{ needs.changes.outputs.helm }}
          - Documentation: ${{ needs.changes.outputs.docs }}
          
          ### 🎯 Next Steps:
          ${results.lintAndFormat === 'failure' ? '- ❌ Fix formatting issues with `cargo fmt`\n' : ''}
          ${results.test === 'failure' ? '- ❌ Fix failing tests\n' : ''}
          ${results.dockerBuild === 'failure' ? '- ❌ Fix Docker build issues\n' : ''}
          ${results.helmLint === 'failure' ? '- ❌ Fix Helm chart issues\n' : ''}
          ${results.securityScan === 'failure' ? '- ❌ Address security vulnerabilities\n' : ''}
          ${results.performanceCheck === 'failure' ? '- ❌ Investigate performance regressions\n' : ''}
          
          ---
          *Ultra-Low Latency Logging Engine CI/CD Pipeline*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
