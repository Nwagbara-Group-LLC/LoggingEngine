# Metrics Collector Docker Image
# High-performance metrics collection and Prometheus integration

# Build stage
FROM rust:1.75-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set up the workspace
WORKDIR /workspace

# Copy workspace Cargo files
COPY Cargo.toml Cargo.lock ./
COPY ultra-logger/Cargo.toml ./ultra-logger/
COPY metrics-collector/Cargo.toml ./metrics-collector/

# Copy source code
COPY ultra-logger/src ./ultra-logger/src
COPY metrics-collector/src ./metrics-collector/src

# Build with optimizations
ENV RUSTFLAGS="-C target-cpu=native -C opt-level=3"
RUN cargo build --release --package metrics-collector

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && useradd --create-home --shell /bin/bash --user-group --uid 1000 trading

# Copy the binary
COPY --from=builder /workspace/target/release/metrics-collector /usr/local/bin/metrics-collector

# Create necessary directories
RUN mkdir -p /var/lib/metrics /var/cache/metrics \
    && chown -R trading:trading /var/lib/metrics /var/cache/metrics

# Switch to non-root user
USER trading

# Set working directory
WORKDIR /home/trading

# Expose ports
EXPOSE 9091 9092

# Health check
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9092/metrics || exit 1

# Set environment variables
ENV RUST_LOG=info

# Run the application
CMD ["/usr/local/bin/metrics-collector"]
