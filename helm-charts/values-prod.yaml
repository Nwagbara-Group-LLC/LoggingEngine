# Production values for ultra-logging-engine
# Override values for production environment

global:
  environment: "production"
  registry: "prodtradingbotregistry.azurecr.io"
  imagePullSecrets:
    - name: acr-secret

# Ultra-Logger Production Configuration
ultraLogger:
  replicaCount: 3
  
  image:
    registry: "prodtradingbotregistry.azurecr.io"
    repository: "ultra-logger"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
      hugepages-2Mi: 1Gi
    limits:
      cpu: 4000m
      memory: 8Gi
      hugepages-2Mi: 4Gi
  
  config:
    logLevel: "warn"
    bufferSize: 4194304  # 4MB for production
    flushIntervalMs: 50   # More aggressive flushing
    compressionEnabled: true
    compressionType: "lz4"  # Fastest compression
  
  persistence:
    enabled: true
    size: 100Gi
    storageClass: "premium-ssd"
  
  performance:
    enableHugepages: true
    cpuAffinity: true
    numaTopology: true
    isolateCpus: "2-5"

# Log Aggregator Production Configuration  
logAggregator:
  replicaCount: 3
  
  image:
    registry: "prodtradingbotregistry.azurecr.io"
    repository: "log-aggregator"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  config:
    listenAddress: "0.0.0.0:9090"
    bufferSize: 2097152  # 2MB
    flushIntervalMs: 500  # More frequent flushes
    maxConnections: 5000  # Higher connection limit

# Metrics Collector Production Configuration
metricsCollector:
  replicaCount: 2
  
  image:
    registry: "prodtradingbotregistry.azurecr.io"
    repository: "metrics-collector"
    tag: "latest"
    pullPolicy: Always
  
  service:
    type: ClusterIP
    ports:
      - name: http
        port: 9091
        targetPort: 9091
      - name: metrics
        port: 9092
        targetPort: 9092
  
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
  
  config:
    listenAddress: "0.0.0.0:9091"
    collectionIntervalMs: 100  # More frequent collection
    retentionHours: 168  # 7 days retention
    enablePrometheus: true
    prometheusPort: 9092

# Enable Redis for production caching
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-production-password"
  master:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"

# Enable Kafka for production streaming
kafka:
  enabled: true
  replicaCount: 3
  persistence:
    enabled: true
    size: 100Gi
    storageClass: "premium-ssd"
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi

# Enable Prometheus for production monitoring
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi

# Pod Security Context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Security Context
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL

# Node Selection for high-performance nodes
nodeSelector:
  node-type: "high-performance"
  kubernetes.io/arch: "amd64"

tolerations:
  - key: "trading-workload"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "high-performance"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Affinity rules for optimal placement
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: node-type
          operator: In
          values:
          - "high-performance"
          - "trading"
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
        - key: cpu-frequency
          operator: In
          values:
          - "high"
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - ultra-logging-engine
        topologyKey: kubernetes.io/hostname

# Autoscaling enabled for production
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

# Pod Disruption Budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network Policy for security
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: trading-platform
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 9091
        - protocol: TCP
          port: 9092
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: []
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 9092  # Kafka

# Ingress for production access
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-burst: "200"
  hosts:
    - host: ultra-logging.trading-platform.com
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: ultra-logging-engine-ultra-logger
              port:
                number: 8080
    - host: metrics.trading-platform.com
      paths:
        - path: /
          pathType: Prefix  
          backend:
            service:
              name: ultra-logging-engine-metrics-collector
              port:
                number: 9092
  tls:
    - secretName: ultra-logging-tls
      hosts:
        - ultra-logging.trading-platform.com
        - metrics.trading-platform.com
